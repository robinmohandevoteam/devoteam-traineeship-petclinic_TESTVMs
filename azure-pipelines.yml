# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:




# - task: DownloadGitHubRelease@0
#   displayName: 'Download GitHub Release'
#   inputs:
#     connection: robinmohandevoteam
#     userRepository: robinmohandevoteam/devoteam-traineeship-petclinic_TESTVMs
#     itemPattern: '**'
#     downloadPath: $(System.ArtifactsDirectory)

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'ls ./terraform'

# - task: Bash@3
#   inputs:
#     targetType: 'inline'
#     script: 'ls $(System.ArtifactsDirectory)/_robinmohandevoteam_devoteam-traineeship-petclinic_TESTVMs/terraform/'

- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    backendServiceArm: 'robinmohan-TFSPN'
    backendAzureRmResourceGroupName: 'pers-robin_mohan-rg'
    backendAzureRmStorageAccountName: 'storageforrobin'
    backendAzureRmContainerName: 'tstate'
    backendAzureRmKey: 'fWu4MDKgnyEOOE+xYzrd+zTHzKq0dsMNdDfKSJ6VMvYlOQhVWc4NamjpXUicPO6AM84AGtjWhBoqYpKUlnb/tA=='
- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    environmentServiceNameAzureRM: 'robinmohan-TFSPN'

- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'apply'
    environmentServiceNameAzureRM: 'robinmohan-TFSPN'