# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:

- task: InstallSSHKey@0
  displayName: 'Install an SSH key'
  inputs:
    knownHostsEntry: default
    sshPublicKey: '$(SSH_PUB_KEY)'
    sshKeySecureFile: robinmohandevoteamdevops


- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'ssh 137.135.86.221'


- task: UsePythonVersion@0
  displayName: 'Install Python'
  inputs:
    addToPath: true 
    versionSpec: '3.9'

- task: Bash@3
  displayName: variables
  inputs:
    targetType: 'inline'
    script: |
      echo $(ARM_CLIENT_ID)

- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    commandOptions: '-reconfigure'
    backendServiceArm: 'robinmohan-TFSPN'
    backendAzureRmResourceGroupName: 'pers-robin_mohan-rg'
    backendAzureRmStorageAccountName: 'storageforrobin'
    backendAzureRmContainerName: 'tstate'
    backendAzureRmKey: 'fWu4MDKgnyEOOE+xYzrd+zTHzKq0dsMNdDfKSJ6VMvYlOQhVWc4NamjpXUicPO6AM84AGtjWhBoqYpKUlnb/tA=='
- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    environmentServiceNameAzureRM: 'robinmohan-TFSPN'

- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    environmentServiceNameAzureRM: 'robinmohan-TFSPN'

# - task: AzureCLI@2
#   displayName: 'Azure CLI'
#   inputs:
#     azureSubscription: '$(SUBSCRIPTION_NAME)'
#     addSpnToEnvironment: true
#     scriptType: 'bash'
#     scriptLocation: 'inlineScript'
#     inlineScript: |
#       echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(az account show --query="id" -o tsv)"
#       echo "##vso[task.setvariable variable=ARM_CLIENT_ID]${servicePrincipalId}"
#       echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]${servicePrincipalKey}"
#       echo "##vso[task.setvariable variable=ARM_TENANT_ID]${tenantId}"      

- script: pip install ansible[azure]
  displayName: 'Install Ansible and the Azure modules'

- script: |
   python -m pip install --upgrade pip
   ansible-galaxy collection install azure.azcollection
   pip install azure-common
   pip install azure-common.credentials
   wget -q https://raw.githubusercontent.com/ansible-collections/azure/dev/requirements-azure.txt; \
    pip3 install -r requirements-azure.txt; \
  displayName: 'Install Python plugins (for AZ CLI)'

- script: |
   python --version
   ansible --version
   which python
  displayName: 'Install Python plugins (for AZ CLI)'

- script: ansible-playbook -i ./ansible/ansible_azure_rm.yml ./ansible/installdocker.yml -e host_key_checking=False

  displayName: 'Run Ansible Playbook'
  env:
    AZURE_CLIENT_ID: $(ARM_CLIENT_ID)
    AZURE_SECRET: $(ARM_CLIENT_SECRET)
    AZURE_TENANT: $(ARM_TENANT_ID)
    AZURE_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)